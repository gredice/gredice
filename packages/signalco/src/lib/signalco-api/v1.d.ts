/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/status': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['HealthFunctions'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/website/newsletter-subscribe': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Subscribe to a newsletter. */
        post: operations['NewsletterFunction'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/stations/logging/download': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['StationLoggingDownloadFunction'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/station/logging/list': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations['StationLoggingListFunction'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/station/logging/persist': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Appends logging entries. */
        post: operations['StationLoggingPersistFunction'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/station/refresh-token': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Refreshes the access token. */
        post: operations['StationRefreshTokenFunction'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/signalr/conducts/negotiate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Negotiates SignalR connection for conducts hub. */
        post: operations['ConductsNegotiateFunction'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/signalr/contacts/negotiate': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Negotiates SignalR connection for entities hub. */
        post: operations['ContactsNegotiateFunction'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/share/entity': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Shared the entity with users. */
        post: operations['ShareEntityFunction'];
        /** @description Un-shared the entity from users. */
        delete: operations['UnShareEntityFunction'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/entity': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieves all available entities. */
        get: operations['EntityRetrieveFunction'];
        put?: never;
        /** @description Creates or updates entity. Will create entity if Id is not provided. */
        post: operations['EntityUpsertFunction'];
        /** @description Deletes the entity. */
        delete: operations['EntityDeleteFunction'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/entities': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieves entities. */
        get: operations['EntityRetrieveFunction'];
        put?: never;
        post?: never;
        /** @description Deletes the entity. */
        delete: operations['EntityDeleteFunction'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/entity/{id}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieves single entity. */
        get: operations['EntityRetrieveSingleFunction'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/entity/{id}/contacts/{channelName}/{contactName}': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Sets contact value. */
        put: operations['EntityContactSet'];
        post?: never;
        /** @description Deletes the contact. */
        delete: operations['ContactDeleteFunction'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/contact/history': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieves the contact history for provided duration. */
        get: operations['ContactHistoryRetrieveFunction'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/contact/metadata': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Contact metadata. */
        post: operations['ContactMetadataFunction'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/contact/set': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Sets contact value. */
        post: operations['ContactSetFunction'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/conducts/request': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Requests conduct to be executed. */
        post: operations['ConductRequestFunction'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/conducts/request-multiple': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Requests multiple conducts to be executed. */
        post: operations['ConductRequestMultipleFunction'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/auth/pats': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve all user PATs. */
        get: operations['PatsRetrieveFunction'];
        put?: never;
        /** @description Creates new PAT. */
        post: operations['PatsCreateFunction'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        blobInfoDto: {
            name?: string;
            /** Format: date-time */
            createdTimeStamp?: string | null;
            /** Format: date-time */
            modifiedTimeStamp?: string | null;
            /** Format: int64 */
            size?: number | null;
        };
        conductRequestDto: {
            entityId: string;
            channelName: string;
            contactName: string;
            valueSerialized?: string;
            /** Format: double */
            delay?: number | null;
        };
        contactDto: {
            entityId?: string;
            contactName?: string;
            channelName?: string;
            valueSerialized?: string;
            /** Format: date-time */
            timeStamp?: string;
            metadata?: string;
        };
        contactHistoryResponseDto: {
            values?: components['schemas']['timeStampValuePair'][];
        };
        contactMetadataDto: {
            entityId?: string;
            channelName?: string;
            contactName?: string;
            metadata?: string;
        };
        contactSetDto: {
            entityId?: string;
            channelName?: string;
            contactName?: string;
            valueSerialized?: string;
            /** Format: date-time */
            timeStamp?: string | null;
        };
        entityDeleteDto: {
            id: string;
        };
        entityDetailsDto: {
            /**
             * Format: int32
             * @default 0
             * @enum {integer}
             */
            type: 0 | 1 | 2 | 3 | 4 | 5 | 6;
            id?: string;
            alias?: string;
            contacts?: components['schemas']['contactDto'][];
            sharedWith?: components['schemas']['userDto'][];
        };
        entityUpsertDto: {
            id?: string;
            /**
             * Format: int32
             * @default 0
             * @enum {integer|null}
             */
            type: 0 | 1 | 2 | 3 | 4 | 5 | 6 | null;
            alias: string;
        };
        entityUpsertResponseDto: {
            id?: string;
        };
        entry: {
            /** Format: date-time */
            timeStamp?: string | null;
            /**
             * Format: int32
             * @default 0
             * @enum {integer|null}
             */
            level: 0 | 1 | 2 | 3 | 4 | 5 | null;
            message?: string;
        };
        newsletterSubscribeDto: {
            email: string;
        };
        patCreateDto: {
            alias?: string;
            /** Format: date-time */
            expire?: string | null;
        };
        patCreateResponseDto: {
            pat?: string;
        };
        patDto: {
            userId?: string;
            patEnd?: string;
            alias?: string;
            /** Format: date-time */
            expire?: string | null;
        };
        shareRequestDto: {
            entityId: string;
            userEmails: string[];
        };
        signalRConnectionInfo: {
            url?: string;
            accessToken?: string;
        };
        stationRefreshTokenRequestDto: {
            refreshToken: string;
        };
        stationRefreshTokenResponseDto: {
            accessToken?: string;
            /** Format: date-time */
            expire?: string;
        };
        stationsLoggingPersistRequestDto: {
            stationId: string;
            entries: components['schemas']['entry'][];
        };
        timeStampValuePair: {
            /** Format: date-time */
            timeStamp?: string;
            valueSerialized?: string;
        };
        unShareRequestDto: {
            entityId: string;
            userEmails: string[];
        };
        userDto: {
            id?: string;
            email?: string;
            fullName?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    HealthFunctions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No description */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    NewsletterFunction: {
        parameters: {
            query?: never;
            header?: {
                /** @description hCaptcha response. */
                'HCAPTCHA-RESPONSE'?: string;
            };
            path?: never;
            cookie?: never;
        };
        /** @description Subscribe with email address. */
        requestBody?: {
            content: {
                'application/json': components['schemas']['newsletterSubscribeDto'];
            };
        };
        responses: {
            /** @description No description */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description One or more required property is missing in request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StationLoggingDownloadFunction: {
        parameters: {
            query: {
                /** @description The **stationId** parameter */
                stationId: string;
                /** @description The **blobName** parameter. Use list function to obtain available blobs. */
                blobName: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description One or more required property is missing in request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StationLoggingListFunction: {
        parameters: {
            query: {
                /** @description The **StationID** parameter */
                stationId: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of blob infos. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['blobInfoDto'][];
                };
            };
            /** @description One or more required property is missing in request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StationLoggingPersistFunction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The logging entries to persist per station. */
        requestBody?: {
            content: {
                'application/json': components['schemas']['stationsLoggingPersistRequestDto'];
            };
        };
        responses: {
            /** @description No description */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description One or more required property is missing in request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    StationRefreshTokenFunction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['stationRefreshTokenRequestDto'];
            };
        };
        responses: {
            /** @description Payload of StationRefreshTokenResponseDto */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['stationRefreshTokenResponseDto'];
                };
            };
            /** @description One or more required property is missing in request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ConductsNegotiateFunction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description SignalR connection info. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['signalRConnectionInfo'];
                };
            };
        };
    };
    ContactsNegotiateFunction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description SignalR connection info. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['signalRConnectionInfo'];
                };
            };
        };
    };
    ShareEntityFunction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Share one entity with one or more users. */
        requestBody?: {
            content: {
                'application/json': components['schemas']['shareRequestDto'];
            };
        };
        responses: {
            /** @description No description */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description One or more required property is missing in request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UnShareEntityFunction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Un-share one entity with one or more users. */
        requestBody?: {
            content: {
                'application/json': components['schemas']['unShareRequestDto'];
            };
        };
        responses: {
            /** @description No description */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description One or more required property is missing in request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EntityRetrieveFunction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Payload of Array of EntityDetailsDto */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['entityDetailsDto'][];
                };
            };
        };
    };
    EntityUpsertFunction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['entityUpsertDto'];
            };
        };
        responses: {
            /** @description Payload of EntityUpsertResponseDto */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['entityUpsertResponseDto'];
                };
            };
        };
    };
    EntityDeleteFunction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Information about entity to delete. */
        requestBody?: {
            content: {
                'application/json': components['schemas']['entityDeleteDto'];
            };
        };
        responses: {
            /** @description No description */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description One or more required property is missing in request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No description */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EntityRetrieveFunction: {
        parameters: {
            query?: {
                /** @description Types of entities to retrieve. */
                types?: (0 | 1 | 2 | 3 | 4 | 5 | 6)[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Payload of Array of EntityDetailsDto */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['entityDetailsDto'][];
                };
            };
        };
    };
    EntityDeleteFunction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Entity identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No description */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description One or more required property is missing in request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No description */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EntityRetrieveSingleFunction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Entity identifier */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Payload of EntityDetailsDto */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['entityDetailsDto'];
                };
            };
            /** @description No description */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EntityContactSet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Entity identifier */
                id: string;
                /** @description Channel name */
                channelName: string;
                /** @description Contact name */
                contactName: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['contactSetDto'];
            };
        };
        responses: {
            /** @description No description */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description One or more required property is missing in request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ContactDeleteFunction: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Entity identifier */
                id: string;
                /** @description Channel name */
                channelName: string;
                /** @description Contact name */
                contactName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No description */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ContactHistoryRetrieveFunction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Payload of ContactHistoryResponseDto */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['contactHistoryResponseDto'];
                };
            };
            /** @description One or more required property is missing in request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ContactMetadataFunction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['contactMetadataDto'];
            };
        };
        responses: {
            /** @description No description */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description One or more required property is missing in request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ContactSetFunction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['contactSetDto'];
            };
        };
        responses: {
            /** @description No description */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description One or more required property is missing in request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ConductRequestFunction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The conduct to execute. */
        requestBody?: {
            content: {
                'application/json': components['schemas']['conductRequestDto'];
            };
        };
        responses: {
            /** @description No description */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description One or more required property is missing in request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ConductRequestMultipleFunction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Collection of conducts to execute. */
        requestBody?: {
            content: {
                'application/json': components['schemas']['conductRequestDto'][];
            };
        };
        responses: {
            /** @description No description */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description One or more required property is missing in request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PatsRetrieveFunction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Payload of Array of PatDto */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['patDto'][];
                };
            };
        };
    };
    PatsCreateFunction: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': components['schemas']['patCreateDto'];
            };
        };
        responses: {
            /** @description Payload of PatCreateResponseDto */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['patCreateResponseDto'];
                };
            };
        };
    };
}
